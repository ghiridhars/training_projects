package com.mindtree.insuranceCompanyApp.exception;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

@ControllerAdvice
public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {

	@ExceptionHandler(InsuranceAppException.class)
	public ResponseEntity<?> handleInsuranceAppException(InsuranceAppException e, WebRequest wr) {
		ErrorDetails er = new ErrorDetails(e.getMessage(), new Date(), wr.getDescription(false));
		return new ResponseEntity<ErrorDetails>(er, HttpStatus.BAD_REQUEST);
	}

	protected ResponseEntity<Object> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,HttpHeaders headers,HttpStatus status){
		
		Map<String, Object> errors = new HashMap<>();
		
		errors.put("timestamp", new Date());
		errors.put("status",status);
		
		
		ex.getBindingResult().getAllErrors().forEach((error) -> {
			String fieldName = ((FieldError) error).getField();
			String errorMessage = error.getDefaultMessage();
			errors.put(fieldName, errorMessage);
	}
	}

//	@ExceptionHandler(MethodArgumentNotValidException.class)
//	public ResponseEntity<?> handleMethodArgumentNotValid(MethodArgumentNotValidException ex,WebRequest wr) {
//		Map<String, String> errors = new HashMap<>();
//
//		ErrorDetails er = new ErrorDetails(ex.getMessage(), new Date(), wr.getDescription(false));
//		
//		ex.getBindingResult().getAllErrors().forEach((error) -> {
//			String fieldName = ((FieldError) error).getField();
//			String errorMessage = error.getDefaultMessage();
//			errors.put(fieldName, errorMessage);
//		});
//		return new ResponseEntity<>(er, HttpStatus.BAD_REQUEST);
//	}

}
