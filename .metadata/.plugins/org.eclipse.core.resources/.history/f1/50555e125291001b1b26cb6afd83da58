package com.mindtree.insuranceCompanyApp.controller;

import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.validation.Valid;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.validation.Errors;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.mindtree.insuranceCompanyApp.dto.CompanyDto;
import com.mindtree.insuranceCompanyApp.entity.Company;
import com.mindtree.insuranceCompanyApp.exception.CompanyServiceException;
import com.mindtree.insuranceCompanyApp.exception.InsuranceAppException;
import com.mindtree.insuranceCompanyApp.service.CompanyService;

@RestController
@RequestMapping("/company")
public class CompanyController {

	@Autowired
	private CompanyService companyService;
	
	@PostMapping("/addCompany")
	public ResponseEntity<?> addCompany(@RequestBody @Valid CompanyDto cDto, Errors er,@RequestHeader(value="Accept-language") String acceptVal) throws Exception {
		List<String> msg = er.getFieldErrors().stream().map(x -> x.getDefaultMessage()).collect(Collectors.toList());
		CompanyDto c = null;
		Map<String,Object> resp = new LinkedHashMap<>();
			if (!er.hasErrors()) {
				resp.put("Adding details",companyService.addCompany(cDto));
				resp.put("Accept", acceptVal);
			}
			else
			{
				throw new InsuranceAppException(msg.get(0));
			}
		return new ResponseEntity(resp, HttpStatus.ACCEPTED);
	}
	
	@PutMapping("/addCompany/{id}")
	public ResponseEntity<?> updateCompany(@RequestBody @Valid CompanyDto cDto,@PathVariable int id, Errors er) throws Exception {
		List<String> msg = er.getFieldErrors().stream().map(x -> x.getDefaultMessage()).collect(Collectors.toList());
		CompanyDto c = null;
			if (!er.hasErrors()) {
				c = companyService.updateCompanyById(cDto, id);
			}
			else
			{
				throw new InsuranceAppException(msg.get(0));
			}
		return new ResponseEntity(c, HttpStatus.ACCEPTED);
	}

	@RequestMapping("/getAllCompanies")
	public ResponseEntity<?> getAllCompanies() throws InsuranceAppException {
		try {
			HttpHeaders headers = new HttpHeaders();
			headers.add("Purpose", "Getting company details");
			headers.add(HttpHeaders.AGE, "12");
			headers.add(HttpHeaders.WARNING, "VALIDATED");
			List<CompanyDto> cList = companyService.getAllCompanies();
			return ResponseEntity.ok().headers(headers).body(cList);
			
		} catch (CompanyServiceException e) {
			e.printStackTrace();
			throw new InsuranceAppException(e.getMessage(), e);
		}
	}

	@RequestMapping("/getSortedCompanies")
	public ResponseEntity<?> getSortedCompanies() throws InsuranceAppException {
		try {
			HttpHeaders headers = new HttpHeaders();
			headers.add(HttpHeaders.CACHE_CONTROL, "no-cache");
			headers.add(HttpHeaders.ACCEPT_LANGUAGE, headers.getAcceptLanguage().toString());
			headers.add(HttpHeaders.CONNECTION, headers.getConnection().toString());
			headers.add(HttpHeaders.WARNING, "VALIDATED");
			Company[] cList = companyService.getSortedCompanies();
			String[] out = {"name","New India","Star"};
			return ResponseEntity.ok().headers(headers).body(cList);
		} catch (CompanyServiceException e) {
			e.printStackTrace();
			throw new InsuranceAppException(e.getMessage(), e);
		}
	}

}
